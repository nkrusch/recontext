# ==================================================================
#   INTRODUCTION
# ==================================================================
# This file defines how to generate input traces. Every problem has
# the following structure. The `expr` is used for generation and
# `goal` is used for equivalence checking.
#
#  problem_name:                  : Unique name/filename.
#    comment: [str]               : Optional comments.
#    formula: [str]               : (pretty) math formula.
#    goal: [str]                  : SMT formula
#    expr: [str]                  : Evaluable Python expression.
#    vin: Dict[str,int|[int,int]] : Input variables <k, v>
#                                  - k is variable name
#                                  - v is [min, max] or constant.
#    vo: [str|list[str]]          : Output variable name(s).
#    n: [nat]                     : Number of instances.
#
# Generate an input trace by running:   make gen/problem_name
# ==================================================================
#   MATH FUNCTIONS
# ==================================================================
f_xy:
  formula: x = y
  goal: "x == y"
  expr: "x"
  vo: y
  vin:
    x: [ 0, 100 ]
  n: 100
f_xxy:
  formula: x² = y
  goal: "x * x == y"
  expr: "x * x"
  vo: y
  vin:
    x: [ -10, 50 ]
  n: 100
f_xxxy:
  formula: x³ = y
  goal: "x * x * x == y"
  expr: "x * x * x"
  vo: y
  vin:
    x: [ -10, 50 ]
  n: 100
f_2xy+:
  formula: 2^x = y
  goal: "2 ** x == y"
  expr: "2 ** x"
  vo: y
  vin:
    x: [ 0, 30 ]
  n: 100
f_2xy:
  formula: 2^x = y
  goal: "2 ** x == y"
  expr: "2 ** x"
  vo: y
  vin:
    x: [ -10, 50 ]
  n: 100
f_3xy:
  formula: 3^x = y
  goal: "3 ** x == y"
  expr: "3 ** x"
  vo: y
  vin:
    x: [ -20, 20 ]
  n: 100
f_2x3y:
  formula: 2x + 3 = y
  goal: "2 * x + 3 == y"
  expr: "2 * x + 3"
  vo: y
  vin:
    x: [ -20, 100 ]
  n: 100
f_axby:
  formula: ax + b = y
  goal: "a * x + b == y"
  expr: "a * x + b"
  vo: y
  vin:
    x: [ -100, 100 ]
    a: [ -100, 100 ]
    b: [ -100, 100 ]
  n: 100
f_axbycz:
  formula: ax + by + c = z
  goal: "a * x + b * y + c == z"
  expr: "a * x + b * y + c"
  vo: z
  vin:
    x: [ -100, 100 ]
    y: [ -100, 100 ]
    a: [ -100, 100 ]
    b: [ -100, 100 ]
    c: [ -100, 100 ]
  n: 100
f_xm20:
  formula: x % 2 = 0
  goal: "x % 2 == 0"
  expr: "randint(0, 100) * 2"
  vo: x
  vin:
  n: 100
f_xm80:
  formula: x % 8 = 0
  goal: "x % 8 == 0"
  expr: "randint(0, 100) * 8"
  vo: x
  vin:
  n: 100
f_xm2a:
  formula: x % 2 = a
  goal: "x % 2 == a"
  expr: "x % 2"
  vo: a
  vin:
    x: [ 0, 100 ]
  n: 100
f_xmba:
  formula: x % b = a
  goal: "x % b == a"
  expr: "x % b"
  vo: a
  vin:
    x: [ 0, 100 ]
    b: [ 1,  20 ]
  n: 100
f_xymba:
  formula: (x + y) % b = a
  goal: "(x + y) % b == a"
  expr: "(x + y) % b"
  vo: a
  vin:
    x: [ 0, 100 ]
    y: [ 0, 100 ]
    b: [ 1,  20 ]
  n: 100

# ==================================================================
#   LINEAR PROBLEMS
# ==================================================================
# source: https://github.com/PL-ML/code2inv
#
# Initially the suite has 133 benchmarks, but we keep 40.
#  9 are invalid => removed
#     see: verified/invalid.dfy
#  38 are duplicates => removed
#     6 11 12 13 14 19 20 21 22 33 34 53 54 55 58 59 60 69 74 76 80
#     81 82 86 89 90 92 104 105 112 113 116 117 122 123 126 127 129
#  46 differ only on numeric ranges or assertion => combined.
# ==================================================================

l_001:
  comment: "combines problem #2"
  formula: 2x = 2 + (y² - y)
  goal: "2 + (y * y - y) == 2 * x"
  expr: "1 + (y * y - y) / 2"
  vo: x
  vin:
    y: [ 0, 100000 ]
  n: 100
l_003:
  comment: "combines problems #4, #5"
  formula: (x = 0) ∨ (y ≤ z ∧ y == min(a, b))
  goal:
    - x == 0
    - y <= z
    - y == min(a, b)
  expr: "b, a if x == 0 else min(a, b)"
  vo: [z, y]
  vin:
    x: [ 0, 100 ]
    b: [ -100, 100 ]
    a: [ -100, 100 ]
  n: 100
l_007:
  comment: "combines problems #7, #8"
  formula: (x = a + 10n) ∧ (y = b + 10n)
  goal:
    - y == x + (b - a)
    - x == a + 10 * n
    - y == b + 10 * n
  expr: "a + n * 10, b + n * 10"
  vo: [x, y]
  vin:
    a: [ 0, 11 ]
    b: [ 0, 11 ]
    n: [ 0, 100 ]
  n: 100
l_009:
  comment: "combines problems #9, #10"
  formula: (x = a + 2n) ∧ (y = b + 2n)
  goal:
    - x == a + 2 * n
    - y == b + 2 * n
  expr: "a + n * 2, b + n * 2"
  vo: [x, y]
  vin:
    a: [ 0, 11 ]
    b: [ 0, 11 ]
    n: [ 0, 100 ]
  n: 100
l_015:
  comment: "combines problems #15, #16, #17, #18"
  formula: m ≤ x ≤ z
  goal:
    - m <= x
    - x <= z
  expr: " randint(0, x), 124"
  vo: [m, z]
  vin:
    x: [ 0, 124 ]
  n: 100
l_023:
  formula: (i = 1 + 2n) ∧ (j = 20 - n)
  goal:
    - i == 41 - 2 * j
    - i == 1 + 2 * n
    - j == 20 - n
  expr: "1 + 2 * n, 20 - n"
  vo: [i, j]
  vin:
    n: [0, 8]
  n: 100
l_024:
  formula: (i = 1 + 2n) ∧ (j = 10 - n)
  goal:
    - i == 21 - 2 * j
    - i == 1 + 2 * n
    - j == 10 - n
  expr: "1 + 2 * n, 10 - n"
  vo: [i, j]
  vin:
    n: [0, 5]
  n: 100
l_025:
  comment: "combines problems #25, #30"
  formula: 0 ≤ x ≤ 100
  goal:
    - 0 <= x
    - x <= 100
  expr: "x"
  vo:
  vin:
    x : [ 0, 100 ]
    n : 100
  n: 100
l_028:
  comment: "combines problems #28, #29"
  formula: ((n < 0) ∧ (x = n)) ∨ (0 ≤ x ≤ n)
  goal:
    - n < 0
    - x == n
    - 0 <= x
    - x <= n
  expr: "n if n < 0 else min(n, randint(0, 100))"
  vo: x
  vin:
    n: [ -100, 100 ]
  n: 100
l_035:
  comment: "combines problems #35, #36, #37"
  formula: 0 ≤ c ≤ 40
  goal:
    - 0 <= c
    - c <= 40
  expr: "c"
  vo:
  vin:
    c : [ 0, 40 ]
  n: 100
l_038:
  comment: "combines problems #38, #39"
  formula: 0 ≤ c ≤ n
  goal:
    - 0 <= c
    - c <= n
  expr: "randint(0, n)"
  vo: c
  vin:
    n: [1, 100]
  n: 100
l_040:
  comment: "combines problems #40, #41, #42, #43, #44, #56, #57"
  formula: c = 0
  goal: "c == 0"
  expr: "0"
  vo: c
  vin:
  n: 100
l_045:
  comment: "combines problems #45, #46, #47, #48, #49"
  formula: 0 ≤ c ≤ n
  goal:
    - 0 <= c
    - c <= n
  expr: "randint(0, n)"
  vo: c
  vin:
    n: [0, 256]
  n: 100
l_050:
  comment: "combines problems #50, #51, #52"
  formula: 0 ≤ c ≤ 4
  goal:
    - 0 <= c
    - c <= 4
  expr: "c"
  vo:
  vin:
    c: [0, 4]
  n: 100
l_063:
  comment: "combines problems #63, #64"
  formula: (x = 1) ∨ (y = 11 - x)
  goal: y == 11 - x
  expr: "11 - x"
  vo: y
  vin:
    x: [1, 10]
  n: 100
l_065:
  comment: "combines problems #65, #66"
  formula: y = 101 - x
  goal: y == 101 - x
  expr: "101 - x"
  vo: y
  vin:
    x: [1, 100]
  n: 500
l_067:
  comment: "combines problems #67, #68, #70"
  formula: y = n + 1 - x
  goal: y == n + 1 - x
  expr: "n + 1 - x"
  vo: y
  vin:
    n: [0,  10]
    x: [1, 100]
  n: 100
l_071:
  comment: "combines problems #71, #73"
  formula: z = 36y + c
  goal: z == 36 * y + c
  expr: "36 * y + c"
  vo: z
  vin:
    y: [127, 256]
    c: [0, 36]
  n: 500
l_077:
  comment: "combines problems #77, #78, #79"
  formula: i ≤ y ≤ x
  goal:
    - i <= y
    - y <= x
  expr: "randint(0, 64), 64, 128"
  vo: [i, y, x]
  vin:
  n: 500
l_083:
  comment: "combines problems #83, #84, #85"
  formula: x = (y² - a² - y + a)/2 - n
  goal: "x == ((y * y - y) - (a * a - a))/2 - n"
  expr: "((y * y - y) - (a * a - a))/2 - n"
  vo: x
  vin:
    a: 4
    y: [4, 11]
    n: 50
  n: 100
l_087:
  comment: "combines problems #87, #88"
  formula: (lock = 1 ∧ x = y) ∨ (lock = 0 ∧ x = y - 1)
  goal:
    - x == y - 1 + lock
    - 0 <= lock
    - lock <= 1
  expr: "x if lock == 1 else x - 1"
  vo: y
  vin:
    x: [0, 100]
    lock: [0, 1]
  n: 100
l_091:
  formula: (y = 0) ∧ (x = 0)
  goal:
    - y == 0
    - x == 0
  expr: "0"
  vo: y
  vin:
    x: 0
  n: 100
l_093:
  formula: (x ≤ 2i) ∧ (y ≤ 2i) ∧ (x + y = 3i)
  goal:
    - x <= 2 * i
    - y <= 2 * i
    - x + y == 3 * i
  expr: "[abs(x - y) for x, y in zip((0, 3 * i), [randint(i, 2 * i)] * 2)]"
  vo: [x, y]
  vin:
    n: 100
    i: [0, 100]
  n: 100
l_094:
  formula: (2j = i² + i) ∧ (i ≤ n + 1)
  goal:
    - 2 * j == i * i + i
    - i <= n + 1
  expr: "(i * i + i) / 2"
  vo: j
  vin:
    n: 122
    i: [0, 123]
  n: 100
l_095:
  comment: "combines problems #95, #96"
  formula: (i ≤ x + 1) ∧ (j = iy)
  goal:
    - i <= x + 1
    - j == i * y
    - j == i
  expr: "[randint(0, x + 1)] * 2"
  vo: [i, j]
  vin:
    y: 1
    x: [0, 100]
  n: 100
l_097:
  comment: "combines problems #97, #98"
  formula: (0 ≤ i ≤ x + 1) ∧ (j = 2i)
  goal:
    - 0 <= i
    - i <= x + 1
    - j == 2 * i
  expr: "[a * b for a, b in zip((1, 2), [0 if x < 0 else randint(0, x)] * 2)]"
  vo: [i, j]
  vin:
    x: [-50, 100]
    y: 2
  n: 100
l_099:
  comment: "combines problems #99, #100"
  formula: y = n - x
  goal: y == n - x
  expr: "n - x"
  vo: y
  vin:
    n: [120, 256]
    x: [0, 120]
  n: 100
l_101:
  comment: "combines problems #101, #102"
  formula: 0 ≤ x ≤ m
  goal:
    - 0 <= x
    - x <= m
  expr: "randint(0, m)"
  vo: x
  vin:
    m: 100
  n: 100
l_103:
  formula: 0 ≤ x ≤ 100
  goal:
    - 0 <= x
    - x <= 100
  expr: "x"
  vo:
  vin:
    x : [ 0, 100 ]
  n: 100
l_107:
  formula: (0 ≤ k ≤ 1) ∧ m = max(a, b)
  goal:
    - 0 <= k
    - k <= 1
    - m == max(a, b)
  expr: "b if k == 0 else max(a, b)"
  vo: m
  vin:
    a: [-20,20]
    b: [-20,20]
    k: [0, 1]
  n: 100
l_108:
  formula: (0 ≤ k ≤ c) ∧ (m = b)
  goal:
    - 0 <= k
    - k <= c
    - m == b
  expr: "randint(-100, b), b, randint(0, max(0, c))"
  vo: [a, m, k]
  vin:
    b: [ 0, 60]
    c: [-20, 100]
  n: 100
l_109:
  formula: (1 ≤ k ≤ c) ∧ m = max(a, b)
  goal:
    - 1 <= k
    - k <= c
    - m == max(a, b)
  expr: "(max(a, b), randint(1,c))"
  vo: [m, k]
  vin:
    a: [-50, 50]
    b: [-50, 50]
    c: [ 1, 100]
  n: 100
l_110:
  comment: "combines problems #110, #111 #118, #119"
  formula: (sn = i - 1) ∧ (0 ≤ sn < i ≤ size + 1)
  goal:
    - sn + 1 == i
    - i <= size + 1
  expr: "[x + y for x, y in zip((0, 1), [0 if size <= 0 else randint(1, size)] * 2)]"
  vo: [sn, i]
  vin:
    size: [1, 200]
  n: 100
l_114:
  comment: "combines problems #114, #115"
  formula: sn = x
  goal: "sn == x"
  expr: "x"
  vo: sn
  vin:
    x: [0, 1000]
  n: 100
l_120:
  comment: "combines problems #120, #121"
  formula: (sn + 1 = i) ∧ (0 ≤ i ≤ 9)
  goal:
    - sn + 1 == i
    - 0 <= i
    - i <= 9
  expr: "i - 1"
  vo: sn
  vin:
    i: [0, 9]
  n: 100
l_124:
  comment: "combines problems #124, #125"
  formula: (0 ≤ x ≤ k) ∧ (y = j - k + x)
  goal:
    - 0 <= x
    - x <= k
    - y == j - k + x
  expr: "[x + y for x, y in zip((0, j-k), [randint(0, k)] * 2)]"
  vo: [x, y]
  vin:
    k: [    0, 100 ]
    j: [ -100, 100 ]
  n: 100
l_128:
  formula: (x = 2ᵏ) ∧ (2ᵏ⁻¹ < y)
  goal:
    - x == 2 ** k
    - 2 ** (k - 1) < y
  expr: "2 ** k"
  vo: x
  vin:
    k: [1, 9]
    y: 478
  n: 100
l_130:
  comment: "combines problems #130, #131"
  formula: (0 ≤ x₁ ≤ 1) ∧ (x₂ = z - 1 + x₁) ∧ (x₃ = b - 1 + x₁)
  goal:
    - x2 == z - 1 + x1
    - x3 == b - 1 + x1
    - 0 <= x1
    - x1 <= 1
  expr: "[x - y for x, y in zip((1, z, b), [randint(0, 1)] * 3)]"
  vo: [x1, x2, x3]
  vin:
    z: [-20, 100]
    b: [-20, 100]
  n: 100
l_132:
  formula: (0 < t < 9) ∧ (t = c - 48) ∧ (j = 2t * (2ᵏ - 1)) ∧ (i = j + t)
  goal:
    - 0 < t
    - t < 9
    - t == c - 48
    - i == j + t
    - j == i - t
    - j == 2 * t * (2 ** k) - 2 * t
  expr: "[(t, 2 * t * (2 ** k) - t - t, 2 * t * (2 ** k) - t) for t in [c - 48]][0]"
  vo: [t, j, i]
  vin:
    c: [49, 56]
    k: [0, 10]
  n: 100
l_133:
  formula: 0 ≤ x ≤ n
  goal:
    - 0 <= x
    - x <= n
  expr: "randint(0, n)"
  vo: x
  vin:
    n: 42
  n: 100
