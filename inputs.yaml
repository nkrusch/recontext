# ==================================================================
#   INTRODUCTION
# ==================================================================
# This file defines how to generate input traces. Every problem has
# the following structure.
#
#  problem_name:                 : Unique name/filename.
#    comment: [str]              : Optional comments.
#    formula: [str]              : Math formula.
#    expr: [str]                 : Evaluable Python expression.
#    vo: [str|list[str]]         : Output variable name.
#    vin:                        : Input variables <k, v>
#      Dict[str, int|[int,int]]    - k is variable name
#                                  - val is [min, max] or const.
#    n: [nat]                    : Number of instances.
#
# Generate an input trace by running:   make gen/problem_name
# ==================================================================

# ==================================================================
#   MATH FUNCTIONS
# ==================================================================
f_xy:
  formula: x = y
  expr: "x"
  vo: y
  vin:
    x: [ 0, 100 ]
  n: 10
f_xxy:
  formula: x² = y
  expr: "x * x"
  vo: y
  vin:
    x: [ -20, 100 ]
  n: 20
f_2x3y:
  formula: 2x + 3 = y
  expr: "2 * x + 3"
  vo: y
  vin:
    x: [ -20, 100 ]
  n: 20
f_logx:
  formula: log x = y
  expr: "log(x)"
  vo: y
  vin:
    x: [ 0, 1000 ]
  n: 10

# ==================================================================
#   LINEAR PROBLEMS
# ==================================================================
# source: https://github.com/PL-ML/code2inv
#
# Initially the suite has 133 benchmarks, but we keep 43.
#  9 are invalid => removed
#  38 are duplicates => removed
#     6 11 12 13 14 19 20 21 22 33 34 53 54 55 58 59 60 69 74 76 80
#     81 82 86 89 90 92 104 105 112 113 116 117 122 123 126 127 129
#  43 differ only on numeric range or assertion => combined.
# ==================================================================

l_001:
  comment: "combines problem #2"
  formula: 2x = 2 + (y² - y)
  expr: "1 + (y * y - y) / 2"
  vo: x
  vin:
    y: [ 0, 100000 ]
  n: 10
l_003:
  comment: "combines problems #4, #5"
  formula: (x = 0) ∨ (y ≤ z)
  expr: "randint(-100,100) if x == 0 else min(randint(-100,100), z)"
  vo: y
  vin:
    x: [ 0, 100 ]
    z: [ -100, 100 ]
  n: 30
l_007:
  comment: "combines problems #7, #8"
  formula: (x = a + 10n) ∧ (y = b + 10n)
  expr: "a + n * 10, b + n * 10"
  vo: [x, y]
  vin:
    a: [ 0, 11 ]
    b: [ 0, 11 ]
    n: [ 0, 100 ]
  n: 30
l_009:
  comment: "combines problems #9, #10"
  formula: (x = a + 2n) ∧ (y = b + 2n)
  expr: "a + n * 2, b + n * 2"
  vo: [x, y]
  vin:
    a: [ 0, 11 ]
    b: [ 0, 11 ]
    n: [ 0, 100 ]
  n: 30
l_015:
  comment: "combines problems #15, #16, #17, #18"
  formula: m ≤ x ≤ z
  expr: " randint(0, x), 124"
  vo: [m, z]
  vin:
    x: [ 0, 124 ]
  n: 20
l_023:
  formula: (i = 1 + 2n) ∧ (j = 20 - n)
  expr: "1 + 2 * n, 20 - n"
  vo: [i, j]
  vin:
    n: [0, 8]
  n: 12
l_024:
  formula: (i = 1 + 2n) ∧ (j = 10 - n)
  expr: "1 + 2 * n, 10 - n"
  vo: [i, j]
  vin:
    n: [0, 5]
  n: 10
l_025:
  comment: "combines problems #25, #30"
  formula: 0 ≤ x ≤ 100
  expr: "x"
  vo:
  vin:
    x : [ 0, 100 ]
  n: 20
l_028:
  comment: "combines problems #28, #29"
  formula: ((n < 0) ∧ (x = n)) ∨ (0 ≤ x ≤ n)
  expr: "n if n < 0 else min(n, randint(0, 100))"
  vo: x
  vin:
    n: [ -100, 100 ]
  n: 20
l_035:
  comment: "combines problems #35, #36, #37"
  formula: 0 ≤ c ≤ 40
  expr: "c"
  vo:
  vin:
    c : [ 0, 40 ]
  n: 20
l_038:
  comment: "combines problems #38, #39"
  formula: 0 ≤ c ≤ n
  expr: "randint(0, n)"
  vo: c
  vin:
    n: [1, 100]
  n: 20
l_040:
  comment: "combines problems #40, #41, #42, #43, #44, #56, #57"
  formula: c = 0
  expr: "0"
  vo: c
  vin:
  n: 3
l_045:
  comment: "combines problems #45, #46, #47, #48, #49"
  formula: 0 ≤ c ≤ n
  expr: "randint(0, n)"
  vo: c
  vin:
    n: [0, 256]
  n: 20
l_050:
  comment: "combines problems #50, #51, #52"
  formula: 0 ≤ c ≤ 4
  expr: "c"
  vo:
  vin:
    c: [0, 4]
  n: 10
l_063:
  comment: "combines problems #63, #64"
  formula: (x = 1) ∨ (y = 11 - x)
  expr: "randint(-20, 20) if x == 1 else 11 - x"
  vo: y
  vin:
    x: [1, 10]
  n: 20
l_065:
  comment: "combines problems #65, #66"
  formula: (x = 1) ∨ (y = 101 - x)
  expr: "randint(-100, 100) if x == 1 else 101 - x"
  vo: y
  vin:
    x: [1, 100]
  n: 20
l_067:
  comment: "combines problems #67, #68, #70"
  formula: (x = 1) ∨ (y = n + 1 - x)
  expr: "a if x == 1 else n + 1 - x"
  vo: y
  vin:
    n: 50
    x: [1, 10]
    a: [-100, 100]
  n: 30
l_071:
  comment: "combines problems #71, #73"
  formula: z = 36y + c
  expr: "36 * y + c"
  vo: z
  vin:
    y: [127, 256]
    c: [0, 36]
  n: 30
l_077:
  comment: "combines problems #77, #78, #79"
  formula: i ≤ y ≤ x
  expr: "randint(0, 1 + 181), 181, 255"
  vo: [i, y ,x]
  vin:
  n: 20
l_083:
  formula: x = (y² - a² - y + a)/2 - 5000
  expr: "-5000 + ((y * y - y) - (a * a - a))/2"
  vo: x
  vin:
    a: 48
    y: [48, 99]
  n: 30
l_084:
  formula: x = (y² - a² - y + a)/2 - 50
  expr: "-50 + ((y * y - y) - (a * a - a))/2"
  vo: x
  vin:
    a: 4
    y: [4, 11]
  n: 30
l_085:
  formula: x = (y² - a² - y + a)/2 - 15000
  expr: "-15000 + ((y * y - y) - (a * a - a))/2"
  vo: x
  vin:
    a: 112
    y: [112, 189]
  n: 30
l_087:
  comment: "combines problems #87, #88"
  formula: (lock = 1 ∧ x = y) ∨ (lock = 0 ∧ x = y - 1)
  expr: "x if lock == 1 else x - 1"
  vo: y
  vin:
    x: [0, 100]
    lock: [0, 1]
  n: 20
l_091:
  formula: (y = 0) ∧ (x = 0)
  expr: "0"
  vo: y
  vin:
    x: 0
  n: 3
l_093:
  formula: (x ≤ 2i) ∧ (y ≤ 2i) ∧ (x + y = 3i)
  expr: "[abs(x - y) for x, y in zip((0, 3 * i), [randint(i, 2 * i)] * 2)]"
  vo: [x, y]
  vin:
    n: 100
    i: [0, 100]
  n: 20
l_094:
  formula: (2j = i² + i) ∧ (i ≤ n + 1)
  expr: "(i * i + i) / 2"
  vo: j
  vin:
    n: 122
    i: [0, 123]
  n: 20
l_095:
  comment: "combines problems #95, #96"
  formula: (x < 0) ∨ ((i ≤ x + 1) ∧ (j = iy))
  expr: "(0, 0) if x < 0 else [randint(0, x + 1)] * 2"
  vo: [i, j]
  vin:
    y: 1
    x: [-50, 100]
  n: 30
l_097:
  comment: "combines problems #97, #98"
  formula: (0 ≤ i ≤ x + 1) ∧ (j = 2i)
  expr: "[a * b for a, b in zip((1, 2), [0 if x < 0 else randint(0, x)] * 2)]"
  vo: [i, j]
  vin:
    x: [-50, 100]
    y: 2
  n: 30
l_099:
  comment: "combines problems #99, #100"
  formula: y = n - x
  expr: "n - x"
  vo: y
  vin:
    n: 256
    x: [0, 256]
  n: 20
l_101:
  comment: "combines problems #101, #102"
  formula: (m < 0) ∨ (0 ≤ x ≤ m)
  expr: "randint(0, m)"
  vo: x
  vin:
    m: 100
  n: 20
l_103:
  formula: 0 ≤ x ≤ 100
  expr: "x"
  vo:
  vin:
    x : [ 0, 100 ]
  n: 20
l_107:
  formula: (k = 0 ∧ m = b) ∨ (k = 1 ∧ m = Max(a, b))
  expr: "b if k == 0 else max(a, b)"
  vo: m
  vin:
    a: [-20,20]
    b: [-20,20]
    k: [0, 1]
  n: 20
l_108:
  formula: (m = b) ∧ ((c ≤ 0 ∧ k = 0) ∨ (0 ≤ k ≤ c))
  expr: "randint(-100, b), b, randint(0, max(0, c))"
  vo: [a, m, k]
  vin:
    b: [ 0, 60]
    c: [-20, 100]
  n: 20
l_109:
  formula: (1 ≤ k ≤ c) ∧ (m = Max(a, b))
  expr: "(max(a, b), randint(1,c))"
  vo: [m, k]
  vin:
    a: [-50, 50]
    b: [-50, 50]
    c: [ 1, 100]
  n: 20
l_110:
  comment: "combines problems #110, #111"
  formula: (sn = i - 1) ∧ (0 ≤ sn < i ≤ n + 1)
  expr: "i - 1"
  vo: sn
  vin:
    n: 134
    i: [1, 134]
  n: 20
l_114:
  comment: "combines problems #114, #115"
  formula: sn = x
  expr: "x"
  vo: sn
  vin:
    x: [0, 1000]
  n: 20
l_118:
  comment: "combines problems #118, #119"
  formula: (sn + 1 = i) ∧ ((size < 1) ∨ (i ≤ size + 1))
  expr: "[x + y for x, y in zip((0, 1), [0 if size <= 0 else randint(1, size)] * 2)]"
  vo: [sn, i]
  vin:
    size: [-100, 200]
  n: 20
l_120:
  comment: "combines problems #120, #121"
  formula: (sn + 1 = i) ∧ (0 ≤ i ≤ 9)
  expr: "i - 1"
  vo: sn
  vin:
    i: [0, 9]
  n: 20
l_124:
  comment: "combines problems #124, #125"
  formula: (0 ≤ x ≤ k) ∧ (y = j - k + x)
  expr: "[x + y for x, y in zip((0, j-k), [randint(0, k)] * 2)]"
  vo: [x, y]
  vin:
    k: [    0, 100 ]
    j: [ -100, 100 ]
  n: 20
l_128:
  formula: ∃ k, (x = 2ᵏ) ∧ (2ᵏ⁻¹ < y)
  expr: "2 ** randint(1, 10)"
  vo: x
  vin:
    y: 957
  n: 20
l_130:
  comment: "combines problems #130, #131"
  formula: (x₁ = 1 ∧ x₂ = z ∧ x₃ = b) ∨ (x₁ = 0 ∧ x₂ = z - 1 ∧ x₃ = b - 1)
  expr: "[x - y for x, y in zip((1, z, b), [randint(0, 1)] * 3)]"
  vo: [x1, x2, x3]
  vin:
    z: [-20, 100]
    b: [-20, 100]
  n: 20
l_132:
  formula: (0 < t < 9) ∧ (t = c - 48) ∧ (j = 2t2ᵏ - 2t) ∧ (i = j + t)
  expr: "[(t, 2*t*(2**k)-t-t, 2*t*(2**k)-t) for t in [c-48]][0]"
  vo: [t, j, i]
  vin:
    c: [49, 56]
    k: [0, 10]
  n: 50
l_133:
  formula: 0 ≤ x ≤ n
  expr: "randint(0, n + 1)"
  vo: x
  vin:
    n: 42
  n: 20